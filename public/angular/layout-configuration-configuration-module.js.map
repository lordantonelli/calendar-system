{"version":3,"sources":["webpack:///./src/app/+layout/configuration/configuration-routing.module.ts","webpack:///./src/app/+layout/configuration/configuration.component.html","webpack:///./src/app/+layout/configuration/configuration.component.ts","webpack:///./src/app/+layout/configuration/configuration.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEY;AAEnE,IAAM,MAAM,GAAW,CAAC;QACtB,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,+EAAsB;KAClC,CAAC,CAAC;AAMH;IAAA;IAA0C,CAAC;IAA9B,0BAA0B;QAJtC,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,0BAA0B,CAAI;IAAD,iCAAC;CAAA;AAAJ;;;;;;;;;;;;ACdvC,mqBAAmqB,0DAA0D,yDAAyD,wBAAwB,oLAAoL,oBAAoB,yBAAyB,oDAAoD,oBAAoB,0BAA0B,kDAAkD,yIAAyI,gCAAgC,MAAM,4JAA4J,qBAAqB,QAAQ,2BAA2B,gCAAgC,4BAA4B,QAAQ,oBAAoB,UAAU,yBAAyB,aAAa,0BAA0B,UAAU,8BAA8B,kBAAkB,+BAA+B,yBAAyB,qBAAqB,QAAQ,0BAA0B,iDAAiD,2BAA2B,QAAQ,qBAAqB,UAAU,iBAAiB,IAAI,kBAAkB,QAAQ,sBAAsB,QAAQ,oBAAoB,UAAU,yBAAyB,kCAAkC,0BAA0B,UAAU,0BAA0B,mCAAmC,2BAA2B,QAAQ,qBAAqB,MAAM,sBAAsB,8/HAA8/H,WAAW,mKAAmK,WAAW,iKAAiK,WAAW,sJAAsJ,UAAU,uJAAuJ,WAAW,qKAAqK,SAAS,qJAAqJ,UAAU,sIAAsI,UAAU,6G;;;;;;;;;;;;;;;;;;;;;;;ACAx4O;AAExB;AAMjC;IAAA;IAOA,CAAC;IANC;;OAEG;IACH,gDAAe,GAAf;QACE,oDAAkB,EAAE,CAAC;IACvB,CAAC;IANU,sBAAsB;QAJlC,+DAAS,CAAC;YACT,QAAQ,EAAE,mBAAmB;YAC7B,mIAA6C;SAC9C,CAAC;OACW,sBAAsB,CAOlC;IAAD,6BAAC;CAAA;AAPkC;;;;;;;;;;;;;;;;;;;;;;;;;;ACRM;AACM;AAE6B;AACT;AAErB;AAU9C;IAAA;IAAmC,CAAC;IAAvB,mBAAmB;QAR/B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,wFAA0B;gBAC1B,2DAAS;aACV;YACD,YAAY,EAAE,CAAC,+EAAsB,CAAC;SACvC,CAAC;OACW,mBAAmB,CAAI;IAAD,0BAAC;CAAA;AAAJ","file":"layout-configuration-configuration-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ConfigurationComponent } from './configuration.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: ConfigurationComponent\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ConfigurationRoutingModule { }\n","module.exports = \"<mk-box header=\\\"Configuring Layout\\\" [isCollapsable]=\\\"false\\\" [isRemovable]=\\\"false\\\">\\n  <p>If can use the layout components or just use the presentation components of angular-admin-lte.</p>\\n  <p> If you chose to use the layout you will need to:</p>\\n  <ol>\\n    <li>Create a layout configuration file.</li>\\n    <li>Import the layout module and provide the layout configuration in your main app module.</li>\\n    <li>Update the main app view.</li>\\n  </ol>\\n</mk-box>\\n\\n\\n<mk-box header=\\\"Configuration File\\\" [isCollapsable]=\\\"false\\\" [isRemovable]=\\\"false\\\">\\n  <pre><code class=\\\"language-typescript\\\" ngNonBindable>export var adminLteConf = &#123;\\n  skin: 'blue',\\n  ...\\n  sidebarLeftMenu: [\\n    &#123;label: 'Start', route: '/', iconClasses: 'fa fa-th'&#125;,\\n    ...\\n  ]\\n&#125;;\\n</code></pre>\\n</mk-box>\\n\\n<mk-box header=\\\"Import Conf And Module\\\" [isCollapsable]=\\\"false\\\" [isRemovable]=\\\"false\\\">\\n  <pre><code class=\\\"language-typescript\\\">import &#123; adminLteConf &#125; from './admin-lte.conf';   //Import the layout configuration.\\nimport &#123; LayoutModule &#125; from 'angular-admin-lte';   //Import the layout module.\\n\\n@NgModule(&#123;\\n  imports: [\\n    ...\\n    LayoutModule.forRoot(adminLteConf),   //Provide the configuration to the layout module.\\n  ],\\n  ...\\n&#125;)\\nexport class AppModule &#123;&#125;\\n</code></pre>\\n</mk-box>\\n\\n<mk-box header=\\\"App view HTML\\\" [isCollapsable]=\\\"false\\\" [isRemovable]=\\\"false\\\">\\n  <pre><code class=\\\"language-html\\\">&lt;mk-layout-wrapper&gt;\\n  &lt;mk-layout-sidebar-right&gt;\\n    Sidebar right HTML\\n  &lt;/mk-layout-sidebar-right&gt;\\n  &lt;mk-layout-header&gt;\\n    &lt;mk-layout-header-logo&gt;Logo HTML&lt;/mk-layout-header-logo&gt;\\n    &lt;mk-layout-header-logo-mini&gt;Logo Mini HTML&lt;/mk-layout-header-logo-mini&gt;\\n    Header HTML\\n  &lt;/mk-layout-header&gt;\\n  &lt;mk-layout-sidebar-left&gt;\\n    Sidebar left HTML (just above menu)\\n  &lt;/mk-layout-sidebar-left&gt;\\n  &lt;mk-layout-content&gt;\\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\\n  &lt;/mk-layout-content&gt;\\n  &lt;mk-layout-footer&gt;\\n    &lt;mk-layout-footer-left&gt;\\n      Footer left HTML\\n    &lt;/mk-layout-footer-left&gt;\\n    &lt;mk-layout-footer-right&gt;\\n      Footer right HTML\\n    &lt;/mk-layout-footer-right&gt;\\n  &lt;/mk-layout-footer&gt;\\n&lt;/mk-layout-wrapper&gt;\\n</code></pre>\\n</mk-box>\\n\\n<mk-box header=\\\"Configuration properties\\\" [isCollapsable]=\\\"true\\\" [isRemovable]=\\\"false\\\" contentStyleClasses=\\\"table-responsive\\\">\\n  <table class=\\\"table table-bordered table-hover\\\">\\n    <tbody>\\n      <tr>\\n        <th>Name</th>\\n        <th>Type</th>\\n        <th>Default</th>\\n        <th>Description</th>\\n      </tr>\\n      <tr>\\n        <td>skin</td>\\n        <td>string ('blue' | 'black' | 'purple' | 'green' | 'red' | 'yellow' | 'blue-light' | 'black-light' | 'purple-light' | 'green-light' | 'red-light' | 'yellow-light')</td>\\n        <td>'blue'</td>\\n        <td>Set the theme skin.</td>\\n      </tr>\\n      <tr>\\n        <td>isSidebarLeftCollapsed</td>\\n        <td>boolean</td>\\n        <td>false</td>\\n        <td>Defines if the sidebar left is collapsed.</td>\\n      </tr>\\n      <tr>\\n        <td>isSidebarLeftExpandOnOver</td>\\n        <td>boolean</td>\\n        <td>false</td>\\n        <td>Define if sidebar left expand on mouse over.</td>\\n      </tr>\\n      <tr>\\n        <td>isSidebarLeftMini</td>\\n        <td>boolean</td>\\n        <td>false</td>\\n        <td>Define if sidebar left minified is visible.</td>\\n      </tr>\\n      <tr>\\n        <td>sidebarRightSkin</td>\\n        <td>string ('dark' | 'light')</td>\\n        <td>'dark'</td>\\n        <td>Set the sidebar right skin.</td>\\n      </tr>\\n      <tr>\\n        <td>isSidebarRightCollapsed</td>\\n        <td>boolean</td>\\n        <td>true</td>\\n        <td>Defines if the sidebar right is collapsed.</td>\\n      </tr>\\n      <tr>\\n        <td>isSidebarRightOverContent</td>\\n        <td>boolean</td>\\n        <td>true</td>\\n        <td>Defines if sidebar right slide over content.</td>\\n      </tr>\\n      <tr>\\n        <td>layout</td>\\n        <td>string ('normal' | 'boxed' | 'fixed')</td>\\n        <td>'normal'</td>\\n        <td>Define the layout style.</td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</mk-box>\\n\\n<mk-box header=\\\"Layout setters\\\" [isCollapsable]=\\\"false\\\" [isRemovable]=\\\"false\\\">\\n  <table class=\\\"table table-bordered table-hover\\\">\\n    <tbody>\\n      <tr>\\n        <th>Name</th>\\n        <th>Parameters</th>\\n        <th>Description</th>\\n      </tr>\\n      <tr>\\n        <td>sidebarLeftCollapsed()</td>\\n        <td>boolean</td>\\n        <td>Programmatically set if sidebar left is collapsed.</td>\\n      </tr>\\n      <tr>\\n        <td>sidebarLeftExpandOnOver()</td>\\n        <td>boolean</td>\\n        <td>Programmatically set if sidebar left expand on over.</td>\\n      </tr>\\n      <tr>\\n        <td>sidebarLeftExpandOnOver()</td>\\n        <td>boolean</td>\\n        <td>Programmatically set if sidebar left expand on over.</td>\\n      </tr>\\n      <tr>\\n        <td>setSidebarRightSkin()</td>\\n        <td>'dark' | 'light'</td>\\n        <td>Programmatically defines sidebar right skin.</td>\\n      </tr>\\n      <tr>\\n        <td>sidebarLeftMini()</td>\\n        <td>boolean</td>\\n        <td>Programmatically set if sidebar left collapsed is visible.</td>\\n      </tr>\\n      <tr>\\n        <td>sidebarRightCollapsed()</td>\\n        <td>boolean</td>\\n        <td>Programmatically set if sidebar right is collapsed.</td>\\n      </tr>\\n      <tr>\\n        <td>sidebarRightOverContent()</td>\\n        <td>boolean</td>\\n        <td>Programmatically set if sidebar right slide over content.</td>\\n      </tr>\\n      <tr>\\n        <td>setSidebarLeftMenu()</td>\\n        <td>Array</td>\\n        <td>Update sidebar right menu.</td>\\n      </tr>\\n      <tr>\\n        <td>setLayout()</td>\\n        <td>string</td>\\n        <td>Update layout style.</td>\\n      </tr>\\n      <tr>\\n        <td>setSkin()</td>\\n        <td>string</td>\\n        <td>Update theme skin.</td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</mk-box>\\n\\n<mk-box header=\\\"Layout subscriptions\\\" [isCollapsable]=\\\"false\\\" [isRemovable]=\\\"false\\\">\\n  <table class=\\\"table table-bordered table-hover\\\">\\n    <tbody>\\n      <tr>\\n        <th>Name</th>\\n        <th>Parameters</th>\\n        <th>Description</th>\\n      </tr>\\n      <tr>\\n        <td>isSidebarLeftCollapsed</td>\\n        <td>Observable&lt;boolean&gt;</td>\\n        <td>Subscribe to sidebar left collapse status.</td>\\n      </tr>\\n      <tr>\\n        <td>isSidebarLeftExpandOnOver</td>\\n        <td>Observable&lt;boolean&gt;</td>\\n        <td>Subscribe to sidebar left expand on over status.</td>\\n      </tr>\\n      <tr>\\n        <td>isSidebarLeftMini</td>\\n        <td>Observable&lt;boolean&gt;</td>\\n        <td>Subscribe to sidebar left mini status.</td>\\n      </tr>\\n      <tr>\\n        <td>sidebarRightSkin</td>\\n        <td>Observable&lt;string&gt;</td>\\n        <td>Subscribe to sidebar right skin.</td>\\n      </tr>\\n      <tr>\\n        <td>isSidebarRightCollapsed</td>\\n        <td>Observable&lt;boolean&gt;</td>\\n        <td>Subscribe to sidebar right collapsed status.</td>\\n      </tr>\\n      <tr>\\n        <td>isSidebarRightOverContent</td>\\n        <td>Observable&lt;Array&gt;</td>\\n        <td>Subscribe to sidebar right over content status.</td>\\n      </tr>\\n      <tr>\\n        <td>layout</td>\\n        <td>Observable&lt;string&gt;</td>\\n        <td>Subscribe to layout style changes.</td>\\n      </tr>\\n      <tr>\\n        <td>skin</td>\\n        <td>Observable&lt;string&gt;</td>\\n        <td>Subscribe to theme skin changes.</td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</mk-box>\\n\"","import { Component, AfterViewInit } from '@angular/core';\n\nimport * as Prism from 'prismjs';\n\n@Component({\n  selector: 'app-configuration',\n  templateUrl: './configuration.component.html'\n})\nexport class ConfigurationComponent implements AfterViewInit {\n  /**\n   * @method ngAfterViewInit\n   */\n  ngAfterViewInit() {\n    Prism.highlightAll();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigurationRoutingModule } from './configuration-routing.module';\nimport { ConfigurationComponent } from './configuration.component';\n\nimport { BoxModule } from 'angular-admin-lte';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigurationRoutingModule,\n    BoxModule\n  ],\n  declarations: [ConfigurationComponent]\n})\nexport class ConfigurationModule { }\n"],"sourceRoot":""}